{
  "name": "DoBot Task Management System with Groq AI",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "tasks-webhook",
        "options": {}
      },
      "id": "trigger-basic-tasks",
      "name": "Webhook Trigger (Tasks)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "tasks-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.body.message || $json.message }}",
              "rightValue": "create task",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-message-type",
      "name": "Check Message Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [450, 200]
    },
    {
      "parameters": {
        "jsCode": "let message = $input.first().json.body?.message || $input.first().json.message || '';\nlet parts = message.replace('create task:', '').split(',');\nreturn [\n    {\n        title: parts[0]?.trim() || '',\n        description: parts[1]?.trim() || '',\n        assignee: parts[2]?.trim() || '',\n        status: 'Creada'\n    }\n];"
      },
      "id": "extract-task-details",
      "name": "Extract Task Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 150]
    },
    {
      "parameters": {
        "url": "http://backend:3000/api/tasks",
        "authentication": "none",
        "requestMethod": "POST",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "id": "create-task-api",
      "name": "Create Task (API)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 150]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.body.message.text }}",
              "rightValue": "list tasks",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-list-command",
      "name": "Check List Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [450, 350]
    },
    {
      "parameters": {
        "url": "http://backend:3000/api/tasks",
        "authentication": "none",
        "options": {}
      },
      "id": "list-tasks-api",
      "name": "List Tasks (API)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 350]
    },
    {
      "parameters": {
        "jsCode": "let tasks = $input.first().json.map(task => `ID: ${task.id}\\nTitle: ${task.title}\\nStatus: ${task.status}\\nAssignee: ${task.assignee}\\n\\n`);\nreturn [\n    {\n        message: `Tasks in the system:\\n${tasks.join('')}`\n    }\n];"
      },
      "id": "format-task-list",
      "name": "Format Task List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 350]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.body.message.text }}",
              "rightValue": "change status",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-change-status",
      "name": "Check Change Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [450, 500]
    },
    {
      "parameters": {
        "jsCode": "let message = $input.first().json.body?.message || $input.first().json.message || '';\nlet parts = message.replace('change status of task:', '').split(',');\nreturn [\n    {\n        id: parts[0]?.trim() || '',\n        status: parts[1]?.trim() || ''\n    }\n];"
      },
      "id": "extract-status-details",
      "name": "Extract Status Change Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 500]
    },
    {
      "parameters": {
        "url": "=http://backend:3000/api/tasks/{{ $json.id }}",
        "authentication": "none",
        "requestMethod": "PUT",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "id": "update-task-status-api",
      "name": "Update Task Status (API)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 500]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "dobot-ai",
        "options": {}
      },
      "id": "trigger-dobot-ai",
      "name": "DoBot AI Chat Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 800],
      "webhookId": "dobot-ai"
    },
    {
      "parameters": {
        "url": "http://backend:3000/api/tasks",
        "authentication": "none",
        "options": {}
      },
      "id": "get-tasks-for-ai",
      "name": "Get Tasks for AI Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 800]
    },
    {
      "parameters": {
        "jsCode": "// Analizar las tareas y preparar contexto inteligente para DoBot\nconst tasks = $input.first().json || [];\nconst userMessage = $('DoBot AI Chat Trigger').first().json.body?.message || $('DoBot AI Chat Trigger').first().json.chatInput || '';\n\n// Estadísticas detalladas\nconst stats = {\n  total: tasks.length,\n  completed: tasks.filter(t => t.status?.toLowerCase().includes('complet') || t.status?.toLowerCase().includes('done')).length,\n  pending: tasks.filter(t => t.status?.toLowerCase().includes('creada') || t.status?.toLowerCase().includes('progress')).length,\n  blocked: tasks.filter(t => t.status?.toLowerCase().includes('blocked') || t.status?.toLowerCase().includes('bloqueada')).length,\n  inProgress: tasks.filter(t => t.status?.toLowerCase().includes('progress')).length\n};\n\n// Análisis por usuario\nconst tasksByUser = {};\nconst blockedTasks = [];\n\ntasks.forEach(task => {\n  const assignee = task.assignee || task.assignedTo || 'Sin asignar';\n  \n  if (!tasksByUser[assignee]) {\n    tasksByUser[assignee] = {\n      total: 0,\n      pending: 0,\n      completed: 0,\n      blocked: 0\n    };\n  }\n  \n  tasksByUser[assignee].total++;\n  \n  if (task.status?.toLowerCase().includes('complet') || task.status?.toLowerCase().includes('done')) {\n    tasksByUser[assignee].completed++;\n  } else if (task.status?.toLowerCase().includes('blocked') || task.status?.toLowerCase().includes('bloqueada')) {\n    tasksByUser[assignee].blocked++;\n    blockedTasks.push({\n      id: task.id,\n      title: task.title,\n      assignee: assignee,\n      description: task.description\n    });\n  } else {\n    tasksByUser[assignee].pending++;\n  }\n});\n\n// Usuario con más tareas pendientes\nconst userWithMostPending = Object.entries(tasksByUser)\n  .sort(([,a], [,b]) => b.pending - a.pending)[0];\n\n// Tareas recientes (últimas 5)\nconst recentTasks = tasks.slice(-5).map(task => ({\n  id: task.id,\n  title: task.title,\n  status: task.status,\n  assignee: task.assignee || 'Sin asignar'\n}));\n\n// Detectar tipo de pregunta para respuesta más inteligente\nconst questionType = {\n  isBlocked: userMessage.toLowerCase().includes('bloqueada') || userMessage.toLowerCase().includes('blocked'),\n  isWho: userMessage.toLowerCase().includes('quien') || userMessage.toLowerCase().includes('who'),\n  isSuggest: userMessage.toLowerCase().includes('suger') || userMessage.toLowerCase().includes('suggest'),\n  isStatus: userMessage.toLowerCase().includes('estado') || userMessage.toLowerCase().includes('status'),\n  isGeneral: userMessage.toLowerCase().includes('hola') || userMessage === '' || userMessage.toLowerCase().includes('help')\n};\n\nreturn {\n  tasks,\n  userMessage,\n  stats,\n  tasksByUser,\n  blockedTasks,\n  userWithMostPending,\n  recentTasks,\n  questionType,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "analyze-tasks-smart",
      "name": "Smart Task Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 800]
    },
    {
      "parameters": {
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "llama-3.1-70b-versatile"
            },
            {
              "name": "messages",
              "value": "={{ [\n  {\n    \"role\": \"system\",\n    \"content\": `Eres DoBot 🤖, un asistente inteligente de gestión de tareas para el sistema DoBot. Siempre responde en español de manera profesional pero amigable.\n\n📊 DATOS ACTUALES DEL PROYECTO:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n📈 Estadísticas Generales:\n• Total de tareas: ${$json.stats.total}\n• ✅ Completadas: ${$json.stats.completed}\n• 🔄 En progreso: ${$json.stats.inProgress}\n• ⏳ Pendientes: ${$json.stats.pending}\n• 🚫 Bloqueadas: ${$json.stats.blocked}\n\n👥 Distribución por Usuario:\n${Object.entries($json.tasksByUser).map(([user, data]) => \n  `• ${user}: ${data.total} total (${data.pending} pendientes, ${data.completed} completadas, ${data.blocked} bloqueadas)`\n).join('\\n')}\n\n${$json.blockedTasks.length > 0 ? `🚫 Tareas Bloqueadas Actuales:\n${$json.blockedTasks.map(task => \n  `• ID ${task.id}: \"${task.title}\" - Asignada a: ${task.assignee}`\n).join('\\n')}` : '✅ No hay tareas bloqueadas actualmente'}\n\n${$json.userWithMostPending ? `👤 Usuario con más tareas pendientes: ${$json.userWithMostPending[0]} (${$json.userWithMostPending[1].pending} tareas)` : ''}\n\n🎯 INSTRUCCIONES ESPECÍFICAS:\n• Si preguntan por tareas bloqueadas: Lista las específicas con detalles\n• Si preguntan quién tiene más tareas: Responde con datos exactos\n• Si piden sugerencias: Crea 3 tareas realistas para desarrollo web\n• Si saludan o preguntan estado general: Da resumen + sugerencias automáticas\n• Si piden ayuda: Explica qué puedes hacer\n• Siempre sé conciso pero completo\n• Usa emojis para hacer las respuestas más visuales\n• Sugiere acciones concretas cuando sea apropiado`\n  },\n  {\n    \"role\": \"user\",\n    \"content\": $json.userMessage || \"Hola DoBot, ¿cuál es el estado actual del proyecto?\"\n  }\n] }}"
            },
            {
              "name": "max_tokens",
              "value": 800
            },
            {
              "name": "temperature",
              "value": 0.7
            },
            {
              "name": "top_p",
              "value": 0.9
            }
          ]
        },
        "options": {}
      },
      "id": "groq-ai-agent",
      "name": "DoBot Groq AI Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 800]
    },
    {
      "parameters": {
        "jsCode": "// Procesar respuesta de Groq y agregar funcionalidades adicionales\nconst groqResponse = $input.first().json;\nconst analysisData = $('Smart Task Analysis').first().json;\n\nlet aiMessage = '';\n\n// Extraer mensaje de la respuesta de Groq\nif (groqResponse.choices && groqResponse.choices[0] && groqResponse.choices[0].message) {\n  aiMessage = groqResponse.choices[0].message.content;\n} else {\n  aiMessage = '❌ Error al procesar la respuesta de la IA. Inténtalo de nuevo.';\n}\n\n// Agregar sugerencias automáticas inteligentes\nlet autoSuggestions = [];\n\n// Lógica de sugerencias automáticas basada en el análisis\nif (analysisData.stats.blocked > 0) {\n  autoSuggestions.push(`🚨 Atención: Hay ${analysisData.stats.blocked} tareas bloqueadas que requieren intervención`);\n}\n\nif (analysisData.stats.pending > analysisData.stats.completed && analysisData.stats.total > 3) {\n  autoSuggestions.push(`📊 Las tareas pendientes (${analysisData.stats.pending}) superan a las completadas (${analysisData.stats.completed})`);\n}\n\nif (analysisData.userWithMostPending && analysisData.userWithMostPending[1].pending > 3) {\n  autoSuggestions.push(`👤 ${analysisData.userWithMostPending[0]} tiene sobrecarga de trabajo con ${analysisData.userWithMostPending[1].pending} tareas pendientes`);\n}\n\nif (analysisData.stats.total === 0) {\n  autoSuggestions.push(`🎯 El proyecto está vacío. ¡Es hora de crear las primeras tareas!`);\n}\n\n// Si es una consulta general, agregar las sugerencias\nif (analysisData.questionType.isGeneral || analysisData.questionType.isStatus) {\n  if (autoSuggestions.length > 0) {\n    aiMessage += `\\n\\n💡 **Recomendaciones automáticas:**\\n${autoSuggestions.map(s => `• ${s}`).join('\\n')}`;\n  }\n  \n  // Agregar acciones rápidas\n  aiMessage += `\\n\\n🔧 **Acciones disponibles:**\\n• Pregúntame \"¿qué tareas están bloqueadas?\"\\n• Pregúntame \"¿quién tiene más tareas pendientes?\"\\n• Dime \"sugiere tareas\" para obtener nuevas ideas\\n• Consulta el \"estado del proyecto\" en cualquier momento`;\n}\n\n// Agregar timestamp y metadata\nconst finalResponse = {\n  message: aiMessage,\n  suggestions: autoSuggestions,\n  timestamp: new Date().toLocaleString('es-ES'),\n  stats: {\n    totalTasks: analysisData.stats.total,\n    blockedTasks: analysisData.stats.blocked,\n    pendingTasks: analysisData.stats.pending\n  }\n};\n\nreturn finalResponse;"
      },
      "id": "format-ai-response",
      "name": "Format AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 800]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "send-ai-response",
      "name": "Send AI Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1250, 800]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger (Tasks)": {
      "main": [
        [
          {
            "node": "Check Message Type",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check List Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Change Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Message Type": {
      "main": [
        [
          {
            "node": "Extract Task Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Task Details": {
      "main": [
        [
          {
            "node": "Create Task (API)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check List Command": {
      "main": [
        [
          {
            "node": "List Tasks (API)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Tasks (API)": {
      "main": [
        [
          {
            "node": "Format Task List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Change Status": {
      "main": [
        [
          {
            "node": "Extract Status Change Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Status Change Details": {
      "main": [
        [
          {
            "node": "Update Task Status (API)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DoBot AI Chat Trigger": {
      "main": [
        [
          {
            "node": "Get Tasks for AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tasks for AI Analysis": {
      "main": [
        [
          {
            "node": "Smart Task Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Smart Task Analysis": {
      "main": [
        [
          {
            "node": "DoBot Groq AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DoBot Groq AI Agent": {
      "main": [
        [
          {
            "node": "Format AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format AI Response": {
      "main": [
        [
          {
            "node": "Send AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "dobot-groq-ai-system",
  "tags": []
}